{"hash":"52cd39df4cee9db6571aab30b334bfca81e6a138","data":{"modelThreatsPost":{"title":"PICKLE-GETATTR","path":"/model-threats/pickle-getattr/","content":"<h2 id=\"overview\"><a href=\"#overview\" aria-hidden=\"true\" tabindex=\"-1\">Overview</a></h2>\n<p>A Pickle-based model contains serialized <a href=\"https://docs.python.org/3/library/pickle.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pickle</a> data which may cause <strong>execution of malicious Python code</strong> when the model is loaded, using the <code>getattr</code> function.</p>\n<p>Many ML model formats such as PyTorch, JobLib, NumPy and more, use Python's Pickle serialization format as part of their internal storage.</p>\n<p>The Pickle format is well-known to be a <strong>dangerous</strong> serialization format, since in addition to serialized data, it may contain serialized code which will be automatically executed when the Pickled/Serialized file is loaded.</p>\n<p><img src=\"/img/pickle_deserialization.png\"></p>\n<p>Specifically - the potentially malicious Python code may contain a reference to the <code>getattr</code> function, which is considered a malicious function by many ML model scanners.</p>\n<p>While <code>getattr</code> is a basic method used in many legitimate codebases, it can be abused in order to run malicious code.</p>\n<h2 id=\"time-of-infection\"><a href=\"#time-of-infection\" aria-hidden=\"true\" tabindex=\"-1\">Time of Infection</a></h2>\n<p><strong>[v] Model Load</strong></p>\n<p>[] Model Query</p>\n<p>[] Other</p>\n<h2 id=\"legitimate-use-of-getattr\"><a href=\"#legitimate-use-of-getattr\" aria-hidden=\"true\" tabindex=\"-1\">Legitimate Use of getattr</a></h2>\n<p>Many legitimate ML libraries such as <a href=\"https://github.com/fastai/fastai\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">fastai</a> use <code>getattr</code> for valid reasons when training an ML model.</p>\n<p>In many deep learning frameworks, especially in object detection models, the <code>getattr</code> function is commonly used in model definitions. It dynamically retrieves methods or attributes based on their names, allowing for greater flexibility in execution.</p>\n<h2 id=\"malicious-use-of-getattr\"><a href=\"#malicious-use-of-getattr\" aria-hidden=\"true\" tabindex=\"-1\">Malicious Use of getattr</a></h2>\n<p>However, getattr can be abused for malicious purposes. For example -</p>\n<pre><code class=\"language-python\">def process_data(user_input):\n     dangerous_func = getattr(os, 'system')\n     dangerous_func(f'echo Processing {user_input}')\n user_controlled_input = \"data; rm -rf ~/*\" \n process_data(user_controlled_input)\n</code></pre>\n<p>In this example, <code>getattr()</code> allows for dynamically calling the <code>os.system</code> method in a stealthy manner, that leads to the execution of a destructive shell command.</p>\n<h2 id=\"evidence-extraction-and-false-positive-elimination\"><a href=\"#evidence-extraction-and-false-positive-elimination\" aria-hidden=\"true\" tabindex=\"-1\">Evidence Extraction and False Positive Elimination</a></h2>\n<p>To safely determine if the <code>getattr</code> use is benign:</p>\n<ol>\n<li>Examine the specific parameters passed to <code>getattr</code></li>\n<li>Verify the source and context of attribute access</li>\n<li>Confirm the object and attribute namespaces are controlled and trusted</li>\n<li>Validate that the retrieved attributes are limited to expected, safe operations</li>\n</ol>\n<p>JFrog conducts a detailed parameter analysis to determine whether <code>getattr</code> is used maliciously, by:</p>\n<ul>\n<li>Confirming the exact attributes being accessed</li>\n<li>Verifying no unexpected or dangerous method calls are used</li>\n<li>Ruling out potential arbitrary code execution scenarios</li>\n<li>Classifying the <code>getattr</code> usage as safe if it meets the above safety criteria</li>\n</ul>\n<p><strong>This systematic approach transforms an initial indication of \"potential security concern\" to a validated safe model through deep contextual examination.</strong></p>\n<h2 id=\"additional-information\"><a href=\"#additional-information\" aria-hidden=\"true\" tabindex=\"-1\">Additional Information</a></h2>\n<ul>\n<li><a href=\"https://jfrog.com/blog/jfrog-and-hugging-face-join-forces/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://jfrog.com/blog/jfrog-and-hugging-face-join-forces/</a></li>\n<li><a href=\"https://blog.trailofbits.com/2024/06/11/exploiting-ml-models-with-pickle-file-attacks-part-1/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://blog.trailofbits.com/2024/06/11/exploiting-ml-models-with-pickle-file-attacks-part-1/</a></li>\n</ul>\n","description":"Pickle-based model using getattr maliciously"}},"context":{}}