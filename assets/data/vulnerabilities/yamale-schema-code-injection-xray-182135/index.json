{"hash":"6d1d30f2ae781aed3e2339863c38dc80ee530631","data":{"post":{"title":"Yamale schema code injection","path":"/vulnerabilities/yamale-schema-code-injection-xray-182135/","content":"<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\" tabindex=\"-1\">Summary</a></h2>\n<p>Insufficient input validation in Yamale allows an attacker to perform Python code injection when processing a malicious schema file</p>\n<h2 id=\"component\"><a href=\"#component\" aria-hidden=\"true\" tabindex=\"-1\">Component</a></h2>\n<p><a href=\"https://github.com/23andMe/Yamale\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yamale</a></p>\n<h2 id=\"affected-versions\"><a href=\"#affected-versions\" aria-hidden=\"true\" tabindex=\"-1\">Affected versions</a></h2>\n<p>Yamale (,3.0.8), fixed in 3.0.8</p>\n<h2 id=\"description\"><a href=\"#description\" aria-hidden=\"true\" tabindex=\"-1\">Description</a></h2>\n<p><a href=\"https://github.com/23andMe/Yamale\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Yamale</a> is a popular schema validator for <a href=\"https://github.com/Animosity/CraftIRC/wiki/Complete-idiot&#x27;s-introduction-to-yaml\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">YAML</a> that’s used by over 200 repositories.</p>\n<p>A code injection vulnerability occurs when parsing a malicious schema file, due to the <code>parser.parse</code> method which invokes an insecure call to <code>eval</code> with user-controlled input.</p>\n<p>An attacker that can control the contents of the schema file that’s supplied to Yamale (<code>-s/--schema</code> command line parameter), can provide a seemingly valid schema file that will cause arbitrary Python code to run.</p>\n<p>This issue may be exploited remotely if some piece of the vendor code allows an attacker to control the schema file, for example:</p>\n<pre><code>subprocess.run([\"yamale\", \"-s\", remote_userinput, \"/path/to/file_to_validate\"])\n</code></pre>\n<p>This scenario is much more likely to be exploited as part of a <a href=\"https://staaldraad.github.io/post/2019-11-24-argument-injection/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">parameter injection</a> attack</p>\n<h2 id=\"poc\"><a href=\"#poc\" aria-hidden=\"true\" tabindex=\"-1\">PoC</a></h2>\n<p>No PoC is supplied for this issue</p>\n<h2 id=\"vulnerability-mitigations\"><a href=\"#vulnerability-mitigations\" aria-hidden=\"true\" tabindex=\"-1\">Vulnerability Mitigations</a></h2>\n<p>No vulnerability mitigations are supplied for this issue</p>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\" tabindex=\"-1\">References</a></h2>\n<p><a href=\"https://jfrog.com/blog/23andmes-yamale-python-code-injection-and-properly-sanitizing-eval/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">(JFrog) Newly discovered code injection vulnerability in Yamale</a></p>\n<p><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2021-38305\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NVD</a></p>\n","description":"CVE-2021-38305 High severity. Insufficient input validation in Yamale allows an attacker to perform Python code injection when processing a malicious schema file","date_published":"2021-10-05","xray_id":"XRAY-182135","vul_id":"CVE-2021-38305","severity":"high","discovered_by":"Andrey Polkovnychenko","last_updated":"2021-10-05","cvss":7.8}},"context":{}}