{"hash":"2e7cd9cde85d75f4ca5a110c5cca1f4c1c76a8c7","data":{"post":{"title":"UA .NET Standard memory exhaustion DoS","path":"/vulnerabilities/ua-net-standard-stack-dos-xray-229142/","content":"<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\" tabindex=\"-1\">Summary</a></h2>\n<p>A memory exhaustion issue in UA .NET Standard and UA .NET Legacy can allow a remote attacker to perform denial of service\n​</p>\n<h2 id=\"component\"><a href=\"#component\" aria-hidden=\"true\" tabindex=\"-1\">Component</a></h2>\n<p><a href=\"https://github.com/OPCFoundation/UA-.NETStandard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">UA .NET Standard</a></p>\n<p><a href=\"https://github.com/OPCFoundation/UA-.NET-Legacy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">UA .NET Legacy</a>\n​</p>\n<h2 id=\"affected-versions\"><a href=\"#affected-versions\" aria-hidden=\"true\" tabindex=\"-1\">Affected versions</a></h2>\n<p>UA .NET Standard (, 1.4.368.53], fixed in 1.4.368.58\nUA .NET Legacy all released versions are affected. Fixed in commit 35199e43d46f0eef793cace12baa806838ddba2c\n​</p>\n<h2 id=\"description\"><a href=\"#description\" aria-hidden=\"true\" tabindex=\"-1\">Description</a></h2>\n<p><a href=\"https://github.com/OPCFoundation/UA-.NETStandard\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">UA .NET Standard</a> is an implementation of an OPC UA server in C#, provided by the OPC Foundation.</p>\n<p>In the binary decoder when parsing an array, a 32 bit length field is being read, then an array of the matching type is being allocated.\nIn some cases this behavior might lead to a denial of service.</p>\n<p>A nested variant array where each element is also a nested array that has a length field set to a large number might in certain cases lead to an Exception of OutOfMemoryException.\nThat’s because for each nested array <code>BinaryDecoder.cs::ReadArrayElements()</code> will try to allocate sizeof(Variant) <em> length and then read the first variant element, but because the first variant element is also an array it will call to ReadArrayElements().\nParsing that array will behave exactly as the containing array, it will allocate an array in size of the specified length and call ReadVariant() and so on.\nThat will lead eventually to an allocation of nesting level </em> length * sizeof(Variant).</p>\n<p>As the parsing process will continue, the garbage collector will be required to free up some space but it will fail, so it will be kept calling on and on while stealing running time to the other threads.\nEventually the server will fail to answer requests in time.</p>\n<p>This issue is also exists in <a href=\"https://github.com/OPCFoundation/UA-.NET-Legacy\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">UA .NET Legacy</a>, the previous implementation of the OPC UA server in C#.</p>\n<h2 id=\"poc\"><a href=\"#poc\" aria-hidden=\"true\" tabindex=\"-1\">PoC</a></h2>\n<p>No PoC is supplied for this issue\n​</p>\n<h2 id=\"vulnerability-mitigations\"><a href=\"#vulnerability-mitigations\" aria-hidden=\"true\" tabindex=\"-1\">Vulnerability Mitigations</a></h2>\n<p>No mitigations are supplied for this issue</p>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\" tabindex=\"-1\">References</a></h2>\n<p><a href=\"https://files.opcfoundation.org/SecurityBulletins/OPC%20Foundation%20Security%20Bulletin%20CVE-2022-29863.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">UA .NET Standard advisory</a></p>\n<p><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-29863\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NVD</a></p>\n","description":"CVE-2022-29863 High severity. A memory exhaustion issue in UA .NET Standard can allow a remote attacker to perform denial of service","date_published":"2022-06-16","xray_id":"XRAY-229142","vul_id":"CVE-2022-29863","severity":"high","discovered_by":"Uriya Yavniely","last_updated":"2022-06-16","cvss":7.5}},"context":{}}