{"hash":"107a16fe4c3f6bf578a82d5938d5bae48e6a6c14","data":{"post":{"title":"OkHttp client Brotli DoS","path":"/vulnerabilities/okhttp-client-brotli-dos/","content":"<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\" tabindex=\"-1\">Summary</a></h2>\n<p>DoS of the OkHttp client when using a BrotliInterceptor and surfing to a malicious web server, or when an attacker can perform MitM to inject a Brotli zip-bomb into an HTTP response</p>\n<h2 id=\"component\"><a href=\"#component\" aria-hidden=\"true\" tabindex=\"-1\">Component</a></h2>\n<p>com.squareup.okhttp3:okhttp-brotli</p>\n<h2 id=\"affected-versions\"><a href=\"#affected-versions\" aria-hidden=\"true\" tabindex=\"-1\">Affected versions</a></h2>\n<p>(,)</p>\n<h2 id=\"description\"><a href=\"#description\" aria-hidden=\"true\" tabindex=\"-1\">Description</a></h2>\n<p>A DoS issue lies in the <code>intercept()</code> function, if the user added <code>BrotliInterceptor</code> as an interceptor and does not add content encoding, the okhttp client will add the http header for Brotli encoding and will automatically try to decompress responses.\nThe code does not guard against decompression bombs, which could crash the process due to memory exhaustion. With Brotli a file that weight several KBs can be decompressed into 10GB.</p>\n<h2 id=\"poc\"><a href=\"#poc\" aria-hidden=\"true\" tabindex=\"-1\">PoC</a></h2>\n<p>The following client code will crash when surfing to an HTTP server that serves a <a href=\"https://github.com/bones-codes/bombs/raw/master/http/10GB/10GB.html.br.bz2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Brotli zip bomb</a> -</p>\n<pre><code class=\"language-java\">import okhttp3.Call;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Request;\nimport okhttp3.Response;\nimport okhttp3.brotli.BrotliInterceptor;\nimport java.io.IOException;\npublic class JavassistIntTruncationExample\n{\npublic static void main(String argv[]) throws IOException {\n    OkHttpClient client = new OkHttpClient.Builder()\n            .addInterceptor(BrotliInterceptor.INSTANCE)\n            .build();\n    Request request = new Request.Builder()\n            .url(\"http://127.0.0.1:8080\")\n            .build();\n    Call call = client.newCall(request);\n    Response response = call.execute();\n    System.out.println(response.body().bytes().length);\n}\n}\n</code></pre>\n<h2 id=\"vulnerability-mitigations\"><a href=\"#vulnerability-mitigations\" aria-hidden=\"true\" tabindex=\"-1\">Vulnerability Mitigations</a></h2>\n<p>Remove any usage of the <code>BrotliInterceptor</code> class. If Brotli functionality is needed, a fixed version of the class <a href=\"https://github.com/square/okhttp/blob/parent-4.11.0/okhttp-brotli/src/main/kotlin/okhttp3/brotli/BrotliInterceptor.kt\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">can be found here</a></p>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\" tabindex=\"-1\">References</a></h2>\n<p><a href=\"https://github.com/square/okhttp/issues/7738\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/square/okhttp/issues/7738</a></p>\n","description":"CVE-2023-3782, MEDIUM, OkHttp client Brotli DoS","date_published":"2023-07-19","xray_id":"XRAY-526161","vul_id":"CVE-2023-3782","severity":"medium","discovered_by":"Omer Kaspi","last_updated":"2023-07-19","cvss":5.9}},"context":{}}