{"hash":"1baec59d9a7acbd22b19eccf3e976539d80db49b","data":{"post":{"title":"axum-core missing request size limit DoS","path":"/vulnerabilities/axum-core-dos/","content":"<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\" tabindex=\"-1\">Summary</a></h2>\n<p>A missing request size limit for HTTP requests in axum-core can allow network attackers to perform denial of service</p>\n<h2 id=\"component\"><a href=\"#component\" aria-hidden=\"true\" tabindex=\"-1\">Component</a></h2>\n<p><a href=\"https://crates.io/crates/axum-core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">axum-core</a></p>\n<h2 id=\"affected-versions\"><a href=\"#affected-versions\" aria-hidden=\"true\" tabindex=\"-1\">Affected versions</a></h2>\n<p>axum-core (, 0.2.7], fixed in 0.2.8</p>\n<p>axum-core (, 0.3.0-rc.1], fixed in 0.3.0-rc.2</p>\n<h2 id=\"description\"><a href=\"#description\" aria-hidden=\"true\" tabindex=\"-1\">Description</a></h2>\n<p><code>&#x3C;bytes::Bytes as axum_core::extract::FromRequest>::from_request</code> would not, by default, set a limit for the size of the request body. That meant if a malicious peer would send a request with a very large <code>Content-Length</code> header (even if the body itself is not very large), the Rust allocator would panic (due to a failed allocation) and the process would crash.</p>\n<p>This also applies to these extractors which used <code>Bytes::from_request</code> internally:</p>\n<ul>\n<li><code>axum::extract::Form</code></li>\n<li><code>axum::extract::Json</code></li>\n<li><code>String</code></li>\n</ul>\n<h2 id=\"poc\"><a href=\"#poc\" aria-hidden=\"true\" tabindex=\"-1\">PoC</a></h2>\n<pre><code class=\"language-bash\">git clone https://github.com/tokio-rs/axum\n\ncd axum/examples &#x26;&#x26; cargo run -p example-readme\n\ncurl -v -X POST \"http://127.0.0.1:3000/users\" -H \"Content-Type: application/json\" \\\n--data `python3 -c \"import sys; sys.stdout.write('a'*10000)\"` -H \"Content-Length: 11111111111111111111\"\n</code></pre>\n<h2 id=\"vulnerability-mitigations\"><a href=\"#vulnerability-mitigations\" aria-hidden=\"true\" tabindex=\"-1\">Vulnerability Mitigations</a></h2>\n<p>No mitigations are provided for this vulnerability.</p>\n<p>In order to fully fix this vulnerability, we recommend upgrading axum-core to version 0.2.8</p>\n<p>The fixed <a href=\"https://github.com/tokio-rs/axum\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">axum</a> version is 0.5.16</p>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\" tabindex=\"-1\">References</a></h2>\n<p><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-3212\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NVD</a></p>\n","description":"CVE-2022-3212 High severity. Missing limit checks in axum-core leads to denial of service","date_published":"2022-08-31","xray_id":"","vul_id":"CVE-2022-3212","severity":"high","discovered_by":"Ori Hollander","last_updated":"2022-08-31","cvss":7.5}},"context":{}}