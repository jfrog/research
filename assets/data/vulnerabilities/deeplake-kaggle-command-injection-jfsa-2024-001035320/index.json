{"hash":"749f23d68e222d29744b26b8a6907ce3070bdb8f","data":{"post":{"title":"Deep Lake Kaggle dataset command injection","path":"/vulnerabilities/deeplake-kaggle-command-injection-jfsa-2024-001035320/","content":"<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\" tabindex=\"-1\">Summary</a></h2>\n<p>Command injection when ingesting a remote Kaggle dataset due to a lack of input sanitization in the ingest_kaggle() API</p>\n<h2 id=\"component\"><a href=\"#component\" aria-hidden=\"true\" tabindex=\"-1\">Component</a></h2>\n<p><a href=\"https://pypi.org/project/deeplake/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">deeplake</a></p>\n<h2 id=\"affected-versions\"><a href=\"#affected-versions\" aria-hidden=\"true\" tabindex=\"-1\">Affected versions</a></h2>\n<p>(,3.9.10]</p>\n<h2 id=\"description\"><a href=\"#description\" aria-hidden=\"true\" tabindex=\"-1\">Description</a></h2>\n<p>Deep Lake can be used for storing data and vectors while building LLM applications or to manage datasets while training deep learning models.\nDatasets can be loaded from various external sources, such as the Kaggle platform.\nIn order to load an external Kaggle dataset a user will use the exported <code>ingest_kaggle</code> method.</p>\n<p>The method will receive the <code>tag</code> parameter which should indicate the Kaggle dataset tag.</p>\n<p>The <code>tag</code> parameter propagates into the <code>_exec_command</code> method without any form of input filtering.</p>\n<p>Due to this issue, if a user builds an external facing application based on the Deep Lake application with the ability to upload Kaggle datasets, an attacker will be able to perform a remote code execution attack on the server, compromising all integrity, availability, and confidentiality of the available resources.</p>\n<h2 id=\"poc\"><a href=\"#poc\" aria-hidden=\"true\" tabindex=\"-1\">PoC</a></h2>\n<pre><code class=\"language-python\">import deeplake\n\ndeeplake.ingest_kaggle('some/text||touch /tmp/hacked','/tmp/somepath','./tmp/somepath2',kagg\nle_credentials={\"username\":\"mister\",\"key\":\"john\",\"password\":\"doe\"},overwrite=True)\n</code></pre>\n<h2 id=\"vulnerability-mitigations\"><a href=\"#vulnerability-mitigations\" aria-hidden=\"true\" tabindex=\"-1\">Vulnerability Mitigations</a></h2>\n<p>No mitigations are supplied for this issue</p>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\" tabindex=\"-1\">References</a></h2>\n<p><a href=\"https://github.com/activeloopai/deeplake/pull/2876\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vendor fix</a></p>\n","description":"CVE-2024-6507, HIGH, Command injection when ingesting a remote Kaggle dataset due to a lack of input sanitization in the ingest_kaggle() API","date_published":"2024-07-04","xray_id":"JFSA-2024-001035320","vul_id":"CVE-2024-6507","severity":"high","discovered_by":"Natan Nehorai","last_updated":"2024-07-04","cvss":8.1}},"context":{}}