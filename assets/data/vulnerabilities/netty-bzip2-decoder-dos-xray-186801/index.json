{"hash":"395440ef224a898db42a76f9a89f4f80db8aa4f5","data":{"post":{"title":"netty Bzip2 decoder DoS","path":"/vulnerabilities/netty-bzip2-decoder-dos-xray-186801/","content":"<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\" tabindex=\"-1\">Summary</a></h2>\n<p>Resource exhaustion in netty's Bzip2 decoder leads to denial of service</p>\n<h2 id=\"component\"><a href=\"#component\" aria-hidden=\"true\" tabindex=\"-1\">Component</a></h2>\n<p><a href=\"https://github.com/netty/netty\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Netty</a></p>\n<h2 id=\"affected-versions\"><a href=\"#affected-versions\" aria-hidden=\"true\" tabindex=\"-1\">Affected versions</a></h2>\n<p>[4.1.0 - 4.1.67], fixed in 4.1.68</p>\n<h2 id=\"description\"><a href=\"#description\" aria-hidden=\"true\" tabindex=\"-1\">Description</a></h2>\n<p><a href=\"https://github.com/netty/netty\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">netty</a> is a popular client/server framework which enables quick and easy development of network applications such as protocol servers and clients.</p>\n<p>A vulnerability was found in netty's Bzip2 decoder - when using the netty library and accepting arbitrary data streams to decode, netty does not limit the stream in any way.\nAn attacker that can submit a big file to decompress, may cause memory exhaustion which will lead to denial of service on the netty daemon process and possibly other processes on the same machine.</p>\n<p>Example code that can trigger the issue -</p>\n<div class=\"gridsome-highlight\" data-language=\"java\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-java line-numbers\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n<span class=\"token class-name\">Bzip2Decoder</span> decoder <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bzip2Decoder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Create the decompressor</span>\n<span class=\"token keyword\">final</span> <span class=\"token class-name\">ByteBufAllocator</span> allocator <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PooledByteBufAllocator</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">FileInputStream</span> file <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"C:\\\\temp\\\\100GB.bz2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// External input</span>\n<span class=\"token keyword\">int</span> inputChunks <span class=\"token operator\">=</span> <span class=\"token number\">64</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ByteBuf</span> buf <span class=\"token operator\">=</span> allocator<span class=\"token punctuation\">.</span><span class=\"token function\">heapBuffer</span><span class=\"token punctuation\">(</span>inputChunks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">ChannelHandlerContext</span> ctx <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StubChannelHandlerContext</span><span class=\"token punctuation\">(</span>allocator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">.</span><span class=\"token function\">writeBytes</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">writableBytes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Input: \"</span> <span class=\"token operator\">+</span> buf<span class=\"token punctuation\">.</span><span class=\"token function\">capacity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndecoder<span class=\"token punctuation\">.</span><span class=\"token function\">channelRead</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// BUG, No internal resource release!</span>\nbuf <span class=\"token operator\">=</span> allocator<span class=\"token punctuation\">.</span><span class=\"token function\">heapBuffer</span><span class=\"token punctuation\">(</span>inputChunks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndecoder<span class=\"token punctuation\">.</span><span class=\"token function\">channelReadComplete</span><span class=\"token punctuation\">(</span>ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<h2 id=\"poc\"><a href=\"#poc\" aria-hidden=\"true\" tabindex=\"-1\">PoC</a></h2>\n<p>No PoC is supplied for this issue.</p>\n<h2 id=\"vulnerability-mitigations\"><a href=\"#vulnerability-mitigations\" aria-hidden=\"true\" tabindex=\"-1\">Vulnerability mitigations</a></h2>\n<p>No vulnerability mitigations are supplied for this issue.</p>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\" tabindex=\"-1\">References</a></h2>\n<p><a href=\"https://jfrog.com/blog/cve-2021-37136-cve-2021-37137-denial-of-service-dos-in-nettys-decompressors/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JFrog Blogpost</a></p>\n","description":"","date_published":"2021-09-09","xray_id":"XRAY-186801","vul_id":"CVE-2021-37136","severity":"high","discovered_by":"Ori Hollander","last_updated":"2021-09-09","cvss":7.5}},"context":{}}