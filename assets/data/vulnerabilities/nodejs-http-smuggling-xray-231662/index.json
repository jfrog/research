{"hash":"7d856b40fc0ec615d2f34de531fd1347ba18676d","data":{"post":{"title":"Node.js llhttp HTTP smuggling","path":"/vulnerabilities/nodejs-http-smuggling-xray-231662/","content":"<h2 id=\"summary\"><a href=\"#summary\" aria-hidden=\"true\" tabindex=\"-1\">Summary</a></h2>\n<p>Improper handling of multi-line Transfer-Encoding headers in Node.js http server leads to HTTP request smuggling</p>\n<h2 id=\"component\"><a href=\"#component\" aria-hidden=\"true\" tabindex=\"-1\">Component</a></h2>\n<p><a href=\"https://nodejs.org/en/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Node.js</a></p>\n<h2 id=\"affected-versions\"><a href=\"#affected-versions\" aria-hidden=\"true\" tabindex=\"-1\">Affected versions</a></h2>\n<p>Node.js (, 14.20.0], (, 16.17.0], (, 18.9.0]. Fixed in 14.20.1, 16.17.1 and 18.9.1</p>\n<p>Originally, the reported fixed versions were 14.14.0, 16.12.0 and 18.5.0. <a href=\"https://hackerone.com/reports/1665156\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">But it has been discovered</a> that these versions did not fix the issue.</p>\n<h2 id=\"description\"><a href=\"#description\" aria-hidden=\"true\" tabindex=\"-1\">Description</a></h2>\n<p><a href=\"https://nodejs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NodeJS</a> is an open-source, cross-platform, back-end JavaScript runtime environment that runs on the V8 engine and executes JavaScript code outside a web browser, which was designed to build scalable network applications.</p>\n<p>Node.js contains an http server implementation, inside its <code>http</code> module. It was discovered that the http server may be vulnerable to <a href=\"https://portswigger.net/web-security/request-smuggling\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><code>HTTP request smuggling</code></a> under certain scenarios.</p>\n<p>The vulnerable scenario involves - </p>\n<ul>\n<li>A back-end Node.js HTTP server (runs <code>http.createServer</code>)</li>\n<li>A front-end proxy that passes data to the Node.js HTTP server</li>\n<li>The front-end proxy is performing some security check on incoming HTTP data, before passing to the back-end</li>\n</ul>\n<p>For example for the following request -</p>\n<pre><code>GET / HTTP/1.1\nTransfer-Encoding: chunked\n , identity\n\n1\na\n0\n</code></pre>\n<p>Node.js handles multi-line header values incorrectly. An upstream proxy that correctly implements multi-line header values will see the <code>Transfer-Encoding</code> header as <code>chunked , identity</code>, and assume that due to the <code>identity</code> value, the content length is 0 (request body is empty).</p>\n<p>On the other hand, due to the bug, the Node.js HTTP server will not process the <code>identity</code> value and treat the encoding as <code>chunked</code>, meaning that Node.js will see the <code>1</code> character as part of the request body.</p>\n<p>This could lead to filter bypasses, in cases where the front-end proxy is not supposed to forward requests with a non-empty body.</p>\n<h2 id=\"poc\"><a href=\"#poc\" aria-hidden=\"true\" tabindex=\"-1\">PoC</a></h2>\n<pre><code>GET / HTTP/1.1\nTransfer-Encoding: chunked\n , identity\n\n1\na\n0\n</code></pre>\n<p>(see description for full explanation)</p>\n<h2 id=\"references\"><a href=\"#references\" aria-hidden=\"true\" tabindex=\"-1\">References</a></h2>\n<p><a href=\"https://hackerone.com/reports/1665156\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Updated Hackerone Issue (JFrog)</a></p>\n<p><a href=\"https://hackerone.com/reports/1501679\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Original Hackerone Issue</a></p>\n<p><a href=\"https://nvd.nist.gov/vuln/detail/CVE-2022-32215\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NVD</a></p>\n","description":"CVE-2022-32215 Medium severity. Improper handling of multi-line Transfer-Encoding headers in Node.js http server leads to HTTP request smuggling","date_published":"2022-10-04","xray_id":"XRAY-231662","vul_id":"CVE-2022-32215","severity":"medium","discovered_by":"Zhang Zeyu, Liav Gutman","last_updated":"2022-10-04","cvss":9.1}},"context":{}}